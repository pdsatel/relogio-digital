#include <LiquidCrystal.h>

#define BUTTON 2
#define BUTTON2 3
#define BUTTON3 11

#define RS 7
#define E 6
#define DB4 4
#define DB5 5
#define DB6 10
#define DB7 11

LiquidCrystal tela(RS, E, DB4, DB5, DB6, DB7);

int sec = 0;
int minut = 0;
int hour = 0;
int horas = 0;
int minutos = 0;
int segundos = 0;
volatile bool flag = false;
volatile bool flag1 = true;
bool startCronometro = false;

void setup() {
  tela.begin(16, 2);
  pinMode(BUTTON, INPUT_PULLUP);
  pinMode(BUTTON2, INPUT_PULLUP);
  pinMode(BUTTON3, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(BUTTON), isr, FALLING);
  attachInterrupt(digitalPinToInterrupt(BUTTON2), isr1, FALLING);
}

void isr() {
  flag = true; // Sinaliza para iniciar ou pausar o cronômetro
}

void isr1() {
  flag1 = false; // Sinaliza para resetar o cronômetro

}

void zeros(int A1, int A2, int A3) {
  tela.setCursor(0, 1);
  if (A1 < 10) tela.print("0");
  tela.print(A1);

  tela.setCursor(3, 1);
  if (A2 < 10) tela.print("0");
  tela.print(A2);

  tela.setCursor(6, 1);
  if (A3 < 10) tela.print("0");
  tela.print(A3);
}
void pause(){
}
  
void cronometro() {

  if (flag1) {
    tela.setCursor(0, 0);
    tela.print("Cronometro :");
    tela.setCursor(0, 1);
    tela.print("00:");
    tela.setCursor(3, 1);
    tela.print("00:00");
  } 
    if (flag) {
      flag = false; // Reseta a flag
      tela.clear();
      startCronometro = false; // Para de contar o cronômetro
       // Sai da função cronômetro

      return;
    }


  if (flag1 == false){
      for (hour = 0; hour < 24; hour++) { // 24 horas
        for (minut = 0; minut < 60; minut++) {
          for (sec = 0; sec < 60; sec++) {
            zeros(hour, minut, sec);
            delay(10);
            tela.setCursor(0, 0);
            tela.print("Cronometro :");
            tela.setCursor(2, 1);
            tela.print(":");
            tela.setCursor(5, 1);
            tela.print(":");

            if (flag) {
              flag = false; // Reseta a flag
              tela.clear();
              startCronometro = false; // Para de contar o cronômetro
              return; // Sai da função cronômetro
            }
          }
        }
      }
  }
}
void relogio() {
  int estadoBT = digitalRead(BUTTON);
  int estadoBT2 = digitalRead(BUTTON2);
  int estadoBT3 = digitalRead(BUTTON3);

  for (hour = horas; hour < 24; hour++) {
    horas = hour;
    if (hour < 10) {
      tela.setCursor(0, 1);
      tela.print("0");
      tela.setCursor(1, 1);
      tela.print(hour);
    } else {
      tela.setCursor(0, 1);
      tela.print(hour);
    }

    for (minut = minutos; minut < 60; minut++) {
      minutos = minut;
      if (minut < 10) {
        tela.setCursor(3, 1);
        tela.print("0");
        tela.setCursor(4, 1);
        tela.print(minut);
      } else {
        tela.setCursor(3, 1);
        tela.print(minut);
      }

      for (sec = segundos; sec < 60; sec++) {
        segundos = sec;
        if (sec < 10) {
          tela.setCursor(6, 1);
          tela.print("0");
          tela.setCursor(7, 1);
          tela.print(sec);
        } else {
          tela.setCursor(6, 1);
          tela.print(sec);
        }

        if (flag) {
          flag = false; // Reseta a flag
          tela.clear();
          startCronometro = true; // Inicia o cronômetro
          return; // Sai da função relogio
        }

        delay(1000);
        tela.setCursor(0, 0);
        tela.print("Horario :");
        tela.setCursor(2, 1);
        tela.print(":");
        tela.setCursor(5, 1);
        tela.print(":");
      }

      segundos = 0;
    }

    minutos = 0;
  }

  horas = 0;
   }
  
 
 void loop() {
  if (startCronometro) {
    cronometro();
  } else {
    relogio();
  }
}

